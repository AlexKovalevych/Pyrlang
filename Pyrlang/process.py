from __future__ import print_function

import gevent
from gevent import Greenlet
from gevent.queue import Queue


class Process(Greenlet):
    """ Implements Erlang process semantic and lifetime
        Registers itself in the process registry, can receive and send messages
    """
    def __init__(self, node) -> None:
        """ Create a process and register itself. Pid is generated by the node
            :param node: 
        """
        Greenlet.__init__(self)

        self.inbox_ = Queue()
        self.pid_ = node.register_new_process(self)
        self.is_exiting_ = False

    def _run(self):
        while not self.is_exiting_:
            while not self.inbox_.empty():
                msg = self.inbox_.get_nowait()
                self.handle_one_inbox_message(msg)
            gevent.sleep(0.0)

    def handle_one_inbox_message(self, msg):
        print("%s: Handling msg %s" % (self.pid_, msg))
